describe('Conversion', function() {
    var entities = {
        '&': '&amp;',
        '"': '&quot;',
        '<': '&lt;',
        '>': '&gt;',
        '¡': '&iexcl;',
        '¢': '&cent;',
        '£': '&pound;',
        '¤': '&curren;',
        '¥': '&yen;',
        '¦': '&brvbar;',
        '§': '&sect;',
        '¨': '&uml;',
        '©': '&copy;',
        'ª': '&ordf;',
        '«': '&laquo;',
        '¬': '&not;',
        '®': '&reg;',
        '¯': '&macr;',
        '°': '&deg;',
        '±': '&plusmn;',
        '²': '&sup2;',
        '³': '&sup3;',
        '´': '&acute;',
        'µ': '&micro;',
        '¶': '&para;',
        '·': '&middot;',
        '¸': '&cedil;',
        '¹': '&sup1;',
        'º': '&ordm;',
        '»': '&raquo;',
        '¼': '&frac14;',
        '½': '&frac12;',
        '¾': '&frac34;',
        '¿': '&iquest;',
        'À': '&Agrave;',
        'Á': '&Aacute;',
        'Â': '&Acirc;',
        'Ã': '&Atilde;',
        'Ä': '&Auml;',
        'Å': '&Aring;',
        'Æ': '&AElig;',
        'Ç': '&Ccedil;',
        'È': '&Egrave;',
        'É': '&Eacute;',
        'Ê': '&Ecirc;',
        'Ë': '&Euml;',
        'Ì': '&Igrave;',
        'Í': '&Iacute;',
        'Î': '&Icirc;',
        'Ï': '&Iuml;',
        'Ð': '&ETH;',
        'Ñ': '&Ntilde;',
        'Ò': '&Ograve;',
        'Ó': '&Oacute;',
        'Ô': '&Ocirc;',
        'Õ': '&Otilde;',
        'Ö': '&Ouml;',
        '×': '&times;',
        'Ø': '&Oslash;',
        'Ù': '&Ugrave;',
        'Ú': '&Uacute;',
        'Û': '&Ucirc;',
        'Ü': '&Uuml;',
        'Ý': '&Yacute;',
        'Þ': '&THORN;',
        'ß': '&szlig;',
        'à': '&agrave;',
        'á': '&aacute;',
        'â': '&acirc;',
        'ã': '&atilde;',
        'ä': '&auml;',
        'å': '&aring;',
        'æ': '&aelig;',
        'ç': '&ccedil;',
        'è': '&egrave;',
        'é': '&eacute;',
        'ê': '&ecirc;',
        'ë': '&euml;',
        'ì': '&igrave;',
        'í': '&iacute;',
        'î': '&icirc;',
        'ï': '&iuml;',
        'ð': '&eth;',
        'ñ': '&ntilde;',
        'ò': '&ograve;',
        'ó': '&oacute;',
        'ô': '&ocirc;',
        'õ': '&otilde;',
        'ö': '&ouml;',
        '÷': '&divide;',
        'ø': '&oslash;',
        'ù': '&ugrave;',
        'ú': '&uacute;',
        'û': '&ucirc;',
        'ü': '&uuml;',
        'ý': '&yacute;',
        'þ': '&thorn;',
        'ÿ': '&yuml;',
        'Œ': '&OElig;',
        'œ': '&oelig;',
        'Š': '&Scaron;',
        'š': '&scaron;',
        'Ÿ': '&Yuml;',
        'ƒ': '&fnof;',
        'ˆ': '&circ;',
        '˜': '&tilde;',
        'Α': '&Alpha;',
        'Β': '&Beta;',
        'Γ': '&Gamma;',
        'Δ': '&Delta;',
        'Ε': '&Epsilon;',
        'Ζ': '&Zeta;',
        'Η': '&Eta;',
        'Θ': '&Theta;',
        'Ι': '&Iota;',
        'Κ': '&Kappa;',
        'Λ': '&Lambda;',
        'Μ': '&Mu;',
        'Ν': '&Nu;',
        'Ξ': '&Xi;',
        'Ο': '&Omicron;',
        'Π': '&Pi;',
        'Ρ': '&Rho;',
        'Σ': '&Sigma;',
        'Τ': '&Tau;',
        'Υ': '&Upsilon;',
        'Φ': '&Phi;',
        'Χ': '&Chi;',
        'Ψ': '&Psi;',
        'Ω': '&Omega;',
        'α': '&alpha;',
        'β': '&beta;',
        'γ': '&gamma;',
        'δ': '&delta;',
        'ε': '&epsilon;',
        'ζ': '&zeta;',
        'η': '&eta;',
        'θ': '&theta;',
        'ι': '&iota;',
        'κ': '&kappa;',
        'λ': '&lambda;',
        'μ': '&mu;',
        'ν': '&nu;',
        'ξ': '&xi;',
        'ο': '&omicron;',
        'π': '&pi;',
        'ρ': '&rho;',
        'ς': '&sigmaf;',
        'σ': '&sigma;',
        'τ': '&tau;',
        'υ': '&upsilon;',
        'φ': '&phi;',
        'χ': '&chi;',
        'ψ': '&psi;',
        'ω': '&omega;',
        'ϑ': '&thetasym;',
        'ϒ': '&upsih;',
        'ϖ': '&piv;',
        '–': '&ndash;',
        '—': '&mdash;',
        '‘': '&quot;',
        '’': '&quot;',
        '“': '&quot;',
        '”': '&quot;',
        '‚': '&sbquo;',
        '„': '&bdquo;',
        '†': '&dagger;',
        '‡': '&Dagger;',
        '•': '&bull;',
        '…': '&hellip;',
        '‰': '&permil;',
        '′': '&prime;',
        '″': '&Prime;',
        '‹': '&lsaquo;',
        '›': '&rsaquo;',
        '‾': '&oline;',
        '⁄': '&frasl;',
        '€': '&euro;',
        'ℑ': '&image;',
        '℘': '&weierp;',
        'ℜ': '&real;',
        '™': '&trade;',
        'ℵ': '&alefsym;',
        '←': '&larr;',
        '↑': '&uarr;',
        '→': '&rarr;',
        '↓': '&darr;',
        '↔': '&harr;',
        '↵': '&crarr;',
        '⇐': '&lArr;',
        '⇑': '&uArr;',
        '⇒': '&rArr;',
        '⇓': '&dArr;',
        '⇔': '&hArr;',
        '∀': '&forall;',
        '∂': '&part;',
        '∃': '&exist;',
        '∅': '&empty;',
        '∇': '&nabla;',
        '∈': '&isin;',
        '∉': '&notin;',
        '∋': '&ni;',
        '∏': '&prod;',
        '∑': '&sum;',
        '−': '&minus;',
        '∗': '&lowast;',
        '√': '&radic;',
        '∝': '&prop;',
        '∞': '&infin;',
        '∠': '&ang;',
        '∧': '&and;',
        '∨': '&or;',
        '∩': '&cap;',
        '∪': '&cup;',
        '∫': '&int;',
        '∴': '&there4;',
        '∼': '&sim;',
        '≅': '&cong;',
        '≈': '&asymp;',
        '≠': '&ne;',
        '≡': '&equiv;',
        '≤': '&le;',
        '≥': '&ge;',
        '⊂': '&sub;',
        '⊃': '&sup;',
        '⊄': '&nsub;',
        '⊆': '&sube;',
        '⊇': '&supe;',
        '⊕': '&oplus;',
        '⊗': '&otimes;',
        '⊥': '&perp;',
        '⋅': '&sdot;',
        '⌈': '&lceil;',
        '⌉': '&rceil;',
        '⌊': '&lfloor;',
        '⌋': '&rfloor;',
        '〈': '&lang;',
        '〉': '&rang;',
        '◊': '&loz;',
        '♠': '&spades;',
        '♣': '&clubs;',
        '♥': '&hearts;',
        '♦': '&diams;'
    };
    
    it('Should return a string', function() {
        var str = 'foo',
            c = new Conversion(str);

        expect(c.getNewString()).toEqual(str);
    });

    it('Should return the HTML escaped string for each entity', function() {
        for(var e in entities) {
            var c = new Conversion(e);

            expect(c.getNewString()).toEqual(entities[e]);
        }
    });

    it('Should not replace ampersands that are already part of an entity', function() {
        var str = 'Foo &amp; Bar',
            c = new Conversion(str);

        expect(c.getNewString()).toEqual(str);
    });

    it('Should allow the user to use typographic quotes', function() {
        var c = new Conversion('“Foo”', true);

        expect(c.getNewString()).toEqual('&ldquo;Foo&rdquo;');
    });

    it('Should return valid HTML if specified by the user', function() {
        var c = new Conversion('<header><p>Foo & Bar</p></header>');

        expect(c.getNewString()).toEqual('<header><p>Foo &amp; Bar</p></header>');
    });

    it('Should ignore entities in HREF and SRC attributes', function() {
        var str = '<head><script src ="http://foo.bar?test=foo&test=bar"></script></head>';
            c = new Conversion(str);

        expect(c.getNewString()).toEqual(str);
    });
});
